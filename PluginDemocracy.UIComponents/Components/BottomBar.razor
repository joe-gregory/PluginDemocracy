@using Microsoft.AspNetCore.Components.Forms
@inject BaseAppState AppState
@inject Services Services

<MudDialog @bind-IsVisible="contributeToCommunityDialogVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Contribute to your Community
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudNavMenu>
            <MudNavLink Href="/post/create" Class="mb-1"><MudIcon Icon="@Icons.Material.Filled.Description" /> Proposal</MudNavLink>
            <MudNavLink OnClick="OpenCreatePost"><MudIcon Icon="@Icons.Material.Filled.PostAdd" /> Post</MudNavLink>
        </MudNavMenu>
    </DialogContent>
</MudDialog>

<MudDialog @bind-IsVisible="createPostDialogVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">
            Create a Post
        </MudText>
    </TitleContent>
    <DialogContent>
        @if (AppState?.User?.Citizenships.Count > 1)
        {
            <MudSelect @bind-Value="MudSelectCommunityId" T="int?" Label="@(AppState.Translate(ResourceKeys.Community))">
                @foreach (CommunityDto community in AppState.User.Citizenships)
                {
                    <MudSelectItem Value="@community.Id">@community.Name</MudSelectItem>
                }
            </MudSelect>
        }
        <MudTextField @bind-Value="postText" Required="true" T="string" Label="Description" Variant="Variant.Outlined" AutoGrow="true" Lines="10" />
        @if (fileStreams.Count > 0)
        {
            <MudList>
                @foreach (var file in fileStreams)
                {
                    <MudListItem>
                        <MudImage Fluid="true" Src=@($"data:{file.Value.ContentType};base64,{file.Value.Base64Thumbnail}") />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => RemoveFile(file.Key))" />
                    </MudListItem>
                }
            </MudList>
        }
        <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".png, .jpg, .jpeg" FilesChanged="PostFiledAdded">
            <ButtonTemplate>
                <MudFab Disabled="@isImageUploadLoading" HtmlTag="label" Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Image" Label="Load Pictures" for="@context.Id"> Upload images</MudFab>
            </ButtonTemplate>
        </MudFileUpload>
        @if (isImageUploadLoading)
        {
            <MudProgressLinear Class="mt-1" Indeterminate="true" Color="Color.Secondary" />
        }
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="createPostButtonDisabled" Color="Color.Primary" Variant="Variant.Filled" OnClick="CreatePost">Create Post</MudButton>
    </DialogActions>
</MudDialog>
@if (AppState.IsLoggedIn)
{
    <MudAppBar Bottom="true" Fixed="true" Color="Color.Primary" Elevation="25">
        <MudSpacer />
        <MudFab Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="ContributeToCommunity" Size="Size.Large" />
        <MudSpacer />
    </MudAppBar>
}

@code
{
    private bool contributeToCommunityDialogVisible = false;
    private bool createPostDialogVisibleInternal = false;
    private bool createPostButtonDisabled = false;
    public bool createPostDialogVisible
    {
        get
        {
            return createPostDialogVisibleInternal;
        }

        set
        {
            if (value == false)
            {
                ClearPostInfo();
            }
            if (AppState.SelectedCommunityInFeed != null) MudSelectCommunityId = AppState.SelectedCommunityInFeed;
            createPostDialogVisibleInternal = value;
        }
    }
    private bool isImageUploadLoading = false;
    private int? MudSelectCommunityId;

    private string? postText = null;
    IList<IBrowserFile> files = new List<IBrowserFile>();
    Dictionary<string, FileData> fileStreams = new Dictionary<string, FileData>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (AppState.SelectedCommunityInFeed != null) MudSelectCommunityId = AppState.SelectedCommunityInFeed;
        AppState.OnChange += () => InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        AppState.OnChange -= () => InvokeAsync(StateHasChanged);
    }
    private void ContributeToCommunity()
    {
        contributeToCommunityDialogVisible = !contributeToCommunityDialogVisible;
    }

    private void OpenCreatePost()
    {
        contributeToCommunityDialogVisible = false;
        createPostDialogVisible = true;
    }
    private async Task PostFiledAdded(IReadOnlyList<IBrowserFile> files)
    {
        isImageUploadLoading = true;
        long maxSize = 5 * 1024 * 1024; //5 MB
        foreach (IBrowserFile file in files)
        {
            if (file.Size > maxSize)
            {
                Services.AddSnackBarMessage("error", $"File is too big. Keep below 5 MB");
                return;
            }

            string imageUrl = await GetBase64Image(file, maxSize);
            if (!string.IsNullOrEmpty(imageUrl))
            {
                this.files.Add(file);
            }
        }
        isImageUploadLoading = false;
    }

    private void RemoveFile(string fileName)
    {
        fileStreams.Remove(fileName);
    }
    private async Task CreatePost()
    {
        createPostButtonDisabled = true;
        if (string.IsNullOrEmpty(postText))
        {
            Services.AddSnackBarMessage("error", "Please add text to your post");
            return;
        }
        int communityId = 0;
        if (AppState?.User?.Citizenships.Count > 1)
        {
            if (MudSelectCommunityId == null)
            {
                Services.AddSnackBarMessage("error", "Please select a community");
                return;
            }
            communityId = MudSelectCommunityId.Value;
        }
        else
        {
            communityId = AppState?.User?.Citizenships[0].Id ?? 0;
        }
        if (communityId == 0)
        {
            Services.AddSnackBarMessage("error", "Please select a community");
            return;
        }
        bool wasUploadSuccessful = await Services.UploadPostAsync(ApiEndPoints.CreateNewPost, postText, fileStreams, communityId);

        //Determine if the post was successfully created before clearing everything
        if (wasUploadSuccessful)
        {
            ClearPostInfo();
            createPostDialogVisible = false;
            AppState?.NotifyPostCreation();
        }
        createPostButtonDisabled = false;
    }
    private void ClearPostInfo()
    {
        files.Clear();
        fileStreams.Clear();
        MudSelectCommunityId = null;
        postText = null;
    }
    private async Task<string> GetBase64Image(IBrowserFile file, long maxSize)
    {
        if (file.Size > maxSize)
        {
            Services.AddSnackBarMessage("error", $"File is too big for Base64Image");
            return string.Empty;
        }
        MemoryStream memoryStream = new();
        await using (Stream stream = file.OpenReadStream(maxSize))
        {
            await stream.CopyToAsync(memoryStream);
        }
        memoryStream.Seek(0, SeekOrigin.Begin); // Reset the stream to the beginning for further use
        var base64String = Convert.ToBase64String(memoryStream.ToArray());
        string mimeType = file.ContentType.ToLower();
        // Store the MemoryStream or its byte array for reuse when uploading
        // Example: store it in a dictionary if multiple files are being handled
        fileStreams[file.Name] = new FileData(memoryStream, Convert.ToBase64String(memoryStream.ToArray()), file.Name, file.ContentType);

        return $"data:{mimeType};base64,{base64String}";
    }
    #region classes
    public class FileData
    {
        public MemoryStream Stream { get; set; }
        public string Base64Thumbnail { get; set; }
        public string FileName { get; set; }
        public string ContentType { get; set; }

        public FileData(MemoryStream stream, string base64Thumbnail, string fileName, string contentType)
        {
            Stream = stream;
            Base64Thumbnail = base64Thumbnail;
            FileName = fileName;
            ContentType = contentType;
        }
    }
    #endregion
}