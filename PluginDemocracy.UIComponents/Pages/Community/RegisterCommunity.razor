@inject Services Services
@inject BaseAppState AppState

<MudText Typo="Typo.h3" Align="Align.Center">@AppState.Translate(ResourceKeys.RegisterCommunity)</MudText>

<MudForm Model="@communityDto" @bind-IsValid="@success" @bind-Errors="@errors" Class="mb-30">
    <MudPaper Class="pa-4 mb-30" Elevation="25">
        <MudTextField @bind-Value="@communityDto.Name" T="string" Label="@AppState.Translate(ResourceKeys.Name)" Required="true" RequiredError="@AppState.Translate(ResourceKeys.Required)" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="@communityDto.Address" T="string" Label="@AppState.Translate(ResourceKeys.Address)" Required="true" RequiredError="@AppState.Translate(ResourceKeys.Required)" Variant="Variant.Outlined" />
        <MudTextField @bind-Value="@communityDto.Description" T="string" Label="@AppState.Translate(ResourceKeys.Description)" Required="true" RequiredError="@AppState.Translate(ResourceKeys.Required)" Variant="Variant.Outlined" />
        <MudSwitch T="bool" ValueChanged="onCurrencySwitch" Size="Size.Large" ThumbIcon="@Icons.Material.Filled.AttachMoney" UnCheckedColor="@Color.Info" Color="@Color.Success">@AppState.Translate(ResourceKeys.OfficialCurrency): @currency <img src="@selectedFlagCurrency" height="14" class="mr-1" /></MudSwitch>
        <MudText>@AppState.Translate(ResourceKeys.SelectAllOfficialLanguages)</MudText>
        <MudCheckBox @bind-Value="@officialLanguageEnglish" Color="Color.Info" Label="@AppState.Translate(ResourceKeys.English)" />
        <MudCheckBox @bind-Value="@officialLanguageSpanish" Color="Color.Success" Label="@AppState.Translate(ResourceKeys.Spanish)" />
        
        <!--HOMES PORTION-->
            <MudText Typo="Typo.h5" Align="Align.Left" Color="Color.Primary">@AppState.Translate(ResourceKeys.Homes)</MudText>

            <!--AUTOMATIC ADDITION OF HOMES-->
            <MudPaper Class="pa-4 ma-3" Elevation="25">
                <MudText>@AppState.Translate(ResourceKeys.AddHomesAutomaticallyDescription)</MudText>
                <MudTextField T="int" @bind-Value="@startingNumberAHA" Label="@AppState.Translate(ResourceKeys.HomesStartingNumber)" Variant="Variant.Outlined" />
                <MudTextField T="int" @bind-Value="@endingNumberAHA" Label="@AppState.Translate(ResourceKeys.HomesEndingNumber)" Variant="Variant.Outlined" />
                <MudTextField @bind-Value="@internalAddressAHA" T="string" Label="@AppState.Translate(ResourceKeys.InternalAddress)" Variant="Variant.Outlined" Required="false" />
                <MudButton Variant="Variant.Filled" Class="mt-5 mr-5" OnClick="@automaticallyAddHomes">@AppState.Translate(ResourceKeys.Generate)</MudButton>
            </MudPaper> 
            <!--END AUTOMATIC ADDITION OF HOMES-->
            <!--DISPLAYING THE HOMES ALLOWING EDITING, ADDING AND REMOVING-->
            <CommunityDtoHomesDataGrid Community="@communityDto" />
            <div class="d-flex justify-center mt-5 mb-5">
                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@addIndividualHome" aria-label="Add home"/>
            </div>
            <!--END DISPLAYING THE HOMES ALLOWING EDITING, ADDING AND REMOVING-->

        <!--ALLOW ADDING ANOTHER INDIVIDUAL HOME TO THE TABLE-->
        <!--END HOMES PORTION-->
        <MudButton Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" Disabled="@(!success)" Class="mt-5 mr-5" StartIcon="@Icons.Material.Filled.Save" OnClick="postForm">@AppState.Translate(ResourceKeys.Register)</MudButton>
    </MudPaper>
</MudForm>
    @code {
    private ResidentialCommunityDTO communityDto = new();
    private bool success;
    string[] errors = [];

    private bool currencyBool; //false is USD, true is MXN
    private string currency = "$USD";
    private string selectedFlagCurrency = "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/2880px-Flag_of_the_United_States.svg.png";
    private string usaFlag = "https://upload.wikimedia.org/wikipedia/en/thumb/a/a4/Flag_of_the_United_States.svg/2880px-Flag_of_the_United_States.svg.png";
    private string mxnFlag = "https://upload.wikimedia.org/wikipedia/commons/thumb/f/fc/Flag_of_Mexico.svg/2880px-Flag_of_Mexico.svg.png";

    bool officialLanguageEnglish = false;
    bool officialLanguageSpanish = false;

    #region AUTOMATIC HOMES ADDITION VARIABLES
    private int startingNumberAHA;
    private int endingNumberAHA;
    private string internalAddressAHA = string.Empty;
    #endregion

    /// <summary>
    /// If false, USA, if true, MXN
    /// </summary>
    private void onCurrencySwitch()
    {
        currencyBool = !currencyBool;
        if (!currencyBool)
        {
            selectedFlagCurrency = usaFlag;
            currency = "$USD";
        } 
        else
        {
            selectedFlagCurrency = mxnFlag;
            currency = "$MXN";
        } 
    }
    /// <summary>
    /// This is part of the automatic homes addition box. It will add homes automatically to the community.
    /// It needs to ensure that the initial number is lower than the final number and that neither are negative.
    /// FOR PURPOSES OF THIS FORM ONLY HomeDto.Id = HomeDto.Number.
    ///Don't assign HomeDto.ParentCommunity in CommunityDto.Homes in order to avoid circular references when serializing to JSON in the post method 
    /// </summary>
    private void automaticallyAddHomes()
    {
        if(startingNumberAHA < 0 || endingNumberAHA < 0 || startingNumberAHA > endingNumberAHA || startingNumberAHA == 0 || endingNumberAHA == 0)
        {
            Services.AddSnackBarMessage("error", "starting and ending number cannot be negative or zero and starting number cannot be smaller than ending number.");
            return;
        }
        for(int i = startingNumberAHA; i <= endingNumberAHA; i++)
        {
            HomeDTO newHome = new();
            newHome.Id = i;
            newHome.Number = i;
            newHome.InternalAddress = internalAddressAHA;
            if(communityDto.Homes.Contains(newHome))
            {
                Services.AddSnackBarMessage("warning", "Home number " + i + " already exists in the community.");
                return;
            }
            communityDto.AddHome(newHome);
            newHome.Community = null; //Don't assign HomeDto.ParentCommunity in CommunityDto.Homes in order to avoid circular references when serializing to JSON in the post method
        }
    }
    /// <summary>
    /// It checks the highest HomeDto.Number and assigns the next number to the new home.
    /// FOR PURPOSES OF THIS FORM ONLY HomeDto.Id = HomeDto.Number
    /// </summary>
    private void addIndividualHome()
    {
        int highestNumber = 0;
        if(communityDto.Homes!=null && communityDto.Homes.Count > 0) highestNumber = communityDto.Homes.Max(home => home.Number);
        HomeDTO newHome = new();
        newHome.Id = highestNumber + 1;
        newHome.Number = highestNumber + 1;
        communityDto.AddHome(newHome);
        newHome.Community = null; //Don't assign HomeDto.ParentCommunity in CommunityDto.Homes in order to avoid circular references when serializing to JSON in the post method
    }
    private bool finalCheckBeforePosting()
    {
        bool finalCheck = true;  // Start with the assumption of success

        if (string.IsNullOrEmpty(communityDto.Name))
        {
            Services.AddSnackBarMessage("error", "Community name cannot be empty.");
            finalCheck = false;
        }
        if (string.IsNullOrEmpty(communityDto.Address))
        {
            Services.AddSnackBarMessage("error", "Community address cannot be empty.");
            finalCheck = false;
        }
        if (!officialLanguageEnglish && !officialLanguageSpanish)
        {
            Services.AddSnackBarMessage("error", "At least one official language must be selected.");
            finalCheck = false;
        }
        if (communityDto.Homes.Count == 0)
        {
            Services.AddSnackBarMessage("error", "There are no homes registered for the community.");
            finalCheck = false;
        }
        if (communityDto.Homes.GroupBy(home => home.Number).Any(group => group.Count() > 1))
        {
            Services.AddSnackBarMessage("error", "There are duplicated homes in the community.");
            finalCheck = false;
        }
        return finalCheck;
    }
    private async void postForm()
    {
        //Assign language if all looks good
        if (finalCheckBeforePosting())
        {
            if (officialLanguageEnglish) communityDto.OfficialLanguages.Add(new System.Globalization.CultureInfo("en-US"));
            if (officialLanguageSpanish) communityDto.OfficialLanguages.Add(new System.Globalization.CultureInfo("es-MX"));
            await Services.PostDataAsync<ResidentialCommunityDTO>(ApiEndPoints.RegisterCommunity, communityDto);
        }
        else return;
    }
}
