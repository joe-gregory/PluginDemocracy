@inject BaseAppState AppState
@inject Services Services

<MudText Align="Align.Center" Typo="Typo.h3" Color="Color.Primary">Plugin Democracy Application Administrator Panel</MudText>
<MudText Align="Align.Center" Typo="Typo.subtitle1" Class="mt-5 mb-5">With great power comes great responsability</MudText>

<MudText Typo="Typo.h5">Select Community</MudText>

<MudRadioGroup ValueChanged="@(EventCallback.Factory.Create<CommunityDTO>(this, OnSelectCommunityDtoChanged))" Value="SelectedCommunity">
    @foreach (CommunityDTO communityDtoOption in CommunitiesDto ?? new())
    {
        <MudRadio Color="Color.Primary" Class="mt-2 mb-2" Value="@communityDtoOption">@(communityDtoOption.Name + ", " + communityDtoOption.Address + ", " + communityDtoOption.Description)</MudRadio>
    }
</MudRadioGroup>
@if (SelectedCommunity != null)
{
    <MudText Typo="Typo.h5" Class="mt-10">Pending Join Community Requests</MudText>
    <MudText>Selected Community: @SelectedCommunity.FullName</MudText>
    <MudDataGrid Items="PendingJoinCommunityRequests" Bordered="true" T="JoinCommunityRequestDTO" ReadOnly="true" Elevation="25" RowClick="(e) => OnRowClicked(e.Item)">
        <Columns>
            @* //Request Info  *@
            <PropertyColumn Property="request => request.Id" Title="Request Id" />
            <PropertyColumn Property="request => request.JoiningAsResident" Title="Joining As Resident" />
            <PropertyColumn Property="request => request.JoiningAsOwner" Title="Joining As Owner" />
            <PropertyColumn Property="request => request.OwnershipPercentage" Title="Ownership Claimed" />
            @* //Home Info: *@
            <PropertyColumn Property="request => request.HomeDto != null ? request.HomeDto.Address : null" Title="Home Address" />
            @* //User info: *@
           <PropertyColumn Property="request => request.UserDto != null ? request.UserDto.FullName : null" Title="Name"/>
        </Columns>
    </MudDataGrid>
}
<MudDialog @bind-IsVisible="IsDialogOpen">
    <DialogContent>
        <MudText>Approve or Reject Join Request</MudText>
        <MudText>Details about applicant:</MudText>
        <MudText>Name: @SelectedJoinRequest?.UserDto?.FullName</MudText>
        <MudText>Age: @SelectedJoinRequest?.UserDto?.Age</MudText>
        <MudText>Email: @SelectedJoinRequest?.UserDto?.Email</MudText>
        <MudText>Cel: @SelectedJoinRequest?.UserDto?.PhoneNumber</MudText>
        <MudText>Details about request:</MudText>
        <MudText>Applying as: @(SelectedJoinRequest?.JoiningAsOwner == true ? "Owner" : "Resident")</MudText>
        @if (SelectedJoinRequest?.JoiningAsOwner == true)
        {
            <MudText>Ownership Claimed: @SelectedJoinRequest?.OwnershipPercentage</MudText>
        }
        <MudText>Details about home: </MudText>
        <MudText>Current owners: </MudText>
        @foreach(var pair in SelectedJoinRequest?.HomeDto?.Owners ?? [])
        {
            <MudLink Href=@($"/user/{pair.Key.Id}")>Owner: @pair.Key.FullName Ownership: @($"{pair.Value}%")</MudLink>
        }
        <MudText>Current Residents:</MudText>
        @foreach(BaseCitizenDto resident in SelectedJoinRequest?.HomeDto?.Residents ?? [])
        {
            <MudLink Href=@($"/user/{resident.Id}")>Resident: @resident.FullName</MudLink>
        }
    </DialogContent>
    <DialogActions>
        <MudIconButton Disabled="AppState.IsLoading" Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Primary" OnClick="() => ApproveJoinRequest()" />
        <MudIconButton Disabled="AppState.IsLoading" Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" OnClick="() => RejectJoinRequest()" />
    </DialogActions>
</MudDialog>

@code
{
    private List<CommunityDTO>? CommunitiesDto = [];
    private CommunityDTO? SelectedCommunity = null;
    private List<JoinCommunityRequestDTO>? PendingJoinCommunityRequests = null;
    private bool IsDialogOpen = false;
    private JoinCommunityRequestDTO? SelectedJoinRequest = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //Make sure current user is admin if not, redirect to home page
        bool isUserAdmin = await Services.GetDataGenericAsync<bool>(ApiEndPoints.AdminIsCurrentUserAdmin);
        if (!isUserAdmin) Services.NavigateTo(FrontEndPages.Home);
        //Get a list of all the communities
        CommunitiesDto = await Services.GetDataGenericAsync<List<CommunityDTO>>(ApiEndPoints.AdminGetListOfAllSimpleCommunitiesDtos);
    }
    private async Task OnSelectCommunityDtoChanged(CommunityDTO newValue)
    {
        SelectedCommunity = newValue;
        //Now load the requests for the selected community
        if (SelectedCommunity != null)
        {
            //Make a Get request for the JoinCommunityRequests for that community.
            PendingJoinCommunityRequests = await Services.GetDataGenericAsync<List<JoinCommunityRequestDTO>>(ApiEndPoints.AdminGetPendingJoinCommunityRequests + "?communityId=" + SelectedCommunity.Id);
        }
    }
    private async Task ApproveJoinRequest()
    {
        //Make a post request to approve the request
        await Services.PostDataAsync<JoinCommunityRequestDTO>(ApiEndPoints.AdminAcceptJoinRequest, SelectedJoinRequest);
        //Reload the requests
        
        await CommonDecision();
    }
    private async Task RejectJoinRequest()
    {
        //Make a post request to reject the request
        await Services.PostDataAsync<JoinCommunityRequestDTO>(ApiEndPoints.AdminRejectJoinRequest, SelectedJoinRequest);
        //Reload the requests
        await CommonDecision();
    }
    private async Task CommonDecision()
    {
        PendingJoinCommunityRequests = await Services.GetDataGenericAsync<List<JoinCommunityRequestDTO>>(ApiEndPoints.AdminGetPendingJoinCommunityRequests + "?communityId=" + SelectedCommunity?.Id);
        IsDialogOpen = false; 
    }
    private void OnRowClicked(JoinCommunityRequestDTO request)
    {
        SelectedJoinRequest = request;
        IsDialogOpen = true;
    }
}