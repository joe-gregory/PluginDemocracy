@inject BaseAppState AppState
@inject Services Services

<MudText Typo="Typo.h3">@AppState.Translate(ResourceKeys.NewPasswordTitle)</MudText>

    <MudForm Model="@loginInfoDto" @bind-IsValid="@success" @bind-Errors="@errors">
        <MudPaper Elevation="25" Outlined="true">
            <MudTextField T="string" Label="@AppState.Translate(ResourceKeys.Password)" @ref="pwField1" InputType="InputType.Password" Validation="@(new Func<string, IEnumerable<string>>(Services.PasswordStrength))" Required="true" RequiredError="Password is required!" @bind-Value="loginInfoDto.Password" Variant="Variant.Outlined" />
            <MudTextField T="string" Label="@AppState.Translate(ResourceKeys.Password)" @ref="pwField2" InputType="InputType.Password" Validation="@(new Func<string, IEnumerable<string>>(Services.PasswordStrength))" Required="true" RequiredError="Password is required!" Variant="Variant.Outlined" />
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="mt-5" OnClick="PostForm">@AppState.Translate(ResourceKeys.Update)</MudButton>
        </MudPaper>
    </MudForm>

@code {
    private LoginInfoDTO loginInfoDto = new();
    MudTextField<string>? pwField1;
    MudTextField<string>? pwField2;
    private bool success;
    private string[] errors = { };
    
    [SupplyParameterFromQuery(Name = "token")]
    public string? token { get; set; }

    private async void PostForm()
    {
        if(token == null)
        {
            Services.AddSnackBarMessage("error", "token = null");
            return;
        }
        if (pwField1?.Text != pwField2?.Text)
        {
            Services.AddSnackBarMessage("error", AppState.Translate(ResourceKeys.PasswordsDoNotMatch));
            return;
        }
        string link = ApiEndPoints.PostResetPassword + $"/?token={token}";
        await Services.PostDataAsync<LoginInfoDTO>(link, loginInfoDto);
    } 
}