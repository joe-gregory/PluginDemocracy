@inject BaseAppState AppState
@inject Services Services
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudText Typo="Typo.h3" Align="Align.Center" Class="mb-5">Login</MudText>
<MudForm Model="@loginInfo" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudPaper Class="pa-4" Elevation="25" Outlined="true">
        
        <MudGrid Justify="Justify.Center" Style="align-items: center;">
            <MudItem>
                <MudIcon Icon="@Icons.Material.Outlined.Person" Color="Color.Primary" />
            </MudItem>
        </MudGrid>

        <MudTextField T="string" Label="Email" Required="true" RequiredError="@AppState.Translate("Required")" Validation="@(new EmailAddressAttribute() {ErrorMessage = AppState.Translate("Invalid")})" @bind-Value="loginInfo.Email" Variant="Variant.Outlined" Immediate="true"/>
        <MudTextField T="string" Label="@AppState.Translate("Password")" @ref="pwField1" InputType="InputType.Password" Required="true" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" RequiredError="Password is required!" @bind-Value="loginInfo.Password" Variant="Variant.Outlined" Immediate="true"/>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success || disabled)" Class="mt-5" OnClick="PostForm">Login</MudButton>
    </MudPaper>
</MudForm>
<MudLink Href="/forgotpassword">@AppState.Translate("ForgotPassword?")</MudLink>
@code {
    LoginInfoDto loginInfo = new();

    private bool success;
    private bool disabled; 

    string[] errors = { };
    MudTextField<string>? pwField1;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 7)
            yield return "Password must be at least of length 7";
    }

    private async void PostForm()
    {
        disabled = true;
        loginInfo.Culture = AppState.Culture;
        await Services.PostDataAsync<LoginInfoDto>(ApiEndPoints.PostLogin, loginInfo);
        disabled = false;
        StateHasChanged();
    }
}