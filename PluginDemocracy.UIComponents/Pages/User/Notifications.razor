@inject BaseAppState AppState
@inject Services Services

<MudText Typo="Typo.h3" Align="Align.Center">@AppState.Translate(ResourceKeys.Notifications)</MudText>
<MudText>Number of Notifications: @AppState.User?.HowManyUnreadNotifications</MudText>

<MudTable T="NotificationDTO" Items="@AppState.User?.Notifications.OrderByDescending(n => n.Date).ToList()" OnRowClick="RowClickEvent" Hover="true">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<NotificationDTO, object>(x => x.Date)">@AppState.Translate(ResourceKeys.Date)</MudTableSortLabel></MudTh>
        <MudTh>@AppState.Translate(ResourceKeys.Title)</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<NotificationDTO, object>(x => x.Read)">@AppState.Translate(ResourceKeys.Read)</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="@AppState.Translate(ResourceKeys.Date)">@context.Date</MudTd>
        <MudTd DataLabel="@AppState.Translate(ResourceKeys.Title)">@context.Title</MudTd>
        <MudTd DataLabel="@AppState.Translate(ResourceKeys.Read)">
            <MudIcon Icon="@(context.Read ? Icons.Material.Filled.MarkEmailRead : Icons.Material.Filled.MarkEmailUnread)" />
        </MudTd>
    </RowTemplate>
</MudTable>
<MudDialog @bind-IsVisible="dialogIsOpen">
    <DialogContent>
        @if (selectedNotification != null)
        {
            <MudText Align="Align.Center"><b>@selectedNotification.Title</b></MudText>
            <br/>
            <MudText>@((MarkupString)selectedNotification.Message)</MudText>
        }
    </DialogContent>
    <DialogActions>
        <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Primary" OnClick="CloseDialog" />

    </DialogActions>
</MudDialog>

@code{
    bool dialogIsOpen = false;
    NotificationDTO? selectedNotification = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Services.GetDataAsync(ApiEndPoints.RefreshUserData);
        dialogIsOpen = false;
    }
    private async Task RowClickEvent(TableRowClickEventArgs<NotificationDTO> tableRowClickEventArgs)
    {
        //This gives me access to the item NotificationDto (tableRowClickEventArgs.Item).
        int notificationId = tableRowClickEventArgs.Item.Id;
        //Make Put request to mark this notification as read
        await Services.PutDataAsync<int>(ApiEndPoints.MarkNotificationAsRead, notificationId);
        //Open pop up with the message
        selectedNotification = tableRowClickEventArgs.Item;
        dialogIsOpen = true;
    }
    private async Task CloseDialog()
    {
        dialogIsOpen = false;
        selectedNotification = null;
        await Services.GetDataAsync(ApiEndPoints.RefreshUserData);
    }
}
