<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountUpdatedSuccessfully" xml:space="preserve">
    <value>Account updated successfully</value>
  </data>
  <data name="ConfirmEmailCheckInbox" xml:space="preserve">
    <value>Please check your inbox to confirm your email</value>
  </data>
  <data name="ConfirmEmailLink" xml:space="preserve">
    <value>Confirm Email</value>
  </data>
  <data name="ConfirmEmailP1" xml:space="preserve">
    <value>Thank you for signing up to Plugin Democracy. A new society awaits your input.</value>
  </data>
  <data name="ConfirmEmailP2" xml:space="preserve">
    <value>Please confirm your email by clicking on the following link:</value>
  </data>
  <data name="ConfirmEmailTitle" xml:space="preserve">
    <value>Please confirm your email</value>
  </data>
  <data name="CultureUpdatedSuccessfully" xml:space="preserve">
    <value>Culture updated successfully </value>
  </data>
  <data name="EmailNotFound" xml:space="preserve">
    <value>No user with the given email was found</value>
  </data>
  <data name="EmailOutEmailConfirmedBody" xml:space="preserve">
    <value>Thank you for confirming your email address! We're thrilled to have you on board. 

You've taken an important step in activating your accoung, and now you can help mold the communities in which you live. This is a non-profit ongoing project. If you find any issues with the software or you need features to better serve your community, please take the initiative to let us know. This is one way you can help our communities be more democratic. 

Sincerely, 

The Plugin Democracy Team </value>
  </data>
  <data name="EmailOutEmailConfirmedTitle" xml:space="preserve">
    <value>Email Address Confirmed - Welcome!</value>
  </data>
  <data name="EmailTokenNoMatchBody" xml:space="preserve">
    <value>The token does not match and the email address cannot be confirmed</value>
  </data>
  <data name="EmailTokenNoMatchTitle" xml:space="preserve">
    <value>The token does not match</value>
  </data>
  <data name="NewJoinRequest" xml:space="preserve">
    <value>New join community request</value>
  </data>
  <data name="NewPasswordSuccess" xml:space="preserve">
    <value>New password has been successfully set</value>
  </data>
  <data name="NewUserCreated" xml:space="preserve">
    <value>New user created</value>
  </data>
  <data name="PasswordCantBeEmpty" xml:space="preserve">
    <value>Wrong password</value>
  </data>
  <data name="PasswordMismatch" xml:space="preserve">
    <value>Password does not match</value>
  </data>
  <data name="ProfilePictureUpdated" xml:space="preserve">
    <value>Profile picture updated successfully</value>
  </data>
  <data name="ResetPasswordEmailBody" xml:space="preserve">
    <value>Follow this link to reset your password:</value>
  </data>
  <data name="ResetPasswordEmailSentBody" xml:space="preserve">
    <value>If there is an account with the specified email address, a reset password link has been sent to the inbox. </value>
  </data>
  <data name="ResetPasswordEmailSentTitle" xml:space="preserve">
    <value>Reset password link sent to email address</value>
  </data>
  <data name="ResetPasswordEmailSubject" xml:space="preserve">
    <value>Reset Password for Plugin Democracy</value>
  </data>
  <data name="SuccessfullyUpdatedPasswordBody" xml:space="preserve">
    <value>Your login password for Plugin Democracy has been successfully updated</value>
  </data>
  <data name="SuccessfullyUpdatedPasswordTitle" xml:space="preserve">
    <value>Your password has been updated</value>
  </data>
  <data name="UnableToCreateNewUser" xml:space="preserve">
    <value>Unable to create new user</value>
  </data>
  <data name="UserNotFound" xml:space="preserve">
    <value>User not found</value>
  </data>
  <data name="UserNotFoundBody" xml:space="preserve">
    <value>The user was not found in the database when trying to confirm the Email address.</value>
  </data>
  <data name="YouHaveLoggedIn" xml:space="preserve">
    <value>You have logged in</value>
  </data>
  <data name="YourEmailHasBeenConfirmed" xml:space="preserve">
    <value>Your Email Has Been Confirmed</value>
  </data>
  <data name="YourEmailHasBeenConfirmedBody" xml:space="preserve">
    <value>Thank you for confirming your email address! We're thrilled to have you on board.</value>
  </data>
</root>