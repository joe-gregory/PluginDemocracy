@page "/"
@rendermode InteractiveServer
@inject BaseAppState AppState
@using System.Globalization
@inject Services services
@inject ISnackbar Snackbar



<PageTitle>Home</PageTitle>


<Post PostDto="postDto" />
<MudContainer MaxWidth="MaxWidth.Medium">
    <div style="margin:20px; align-content:center">
        <MudText>Amount of Citizenships: @AppState?.User?.Citizenships.Count</MudText>
        <MudText>First citizenship: @if (AppState.User != null && AppState.User.Citizenships != null && AppState.User.Citizenships.Count >= 1)
            {
                @AppState.User.Citizenships[0].FullName
            }</MudText>
            <MudButton Color="@(AppState.HasInternet == true ? Color.Success : Color.Error)" @onclick="toggleInternetState" Variant="Variant.Filled">Internet: @(AppState.HasInternet == true ? "On" : "Off")</MudButton>
            <MudButton Color="@(AppState.User != null ? Color.Success : Color.Error)" @onclick="toggleLoggedInState" Variant="Variant.Filled" Disabled="@(!AppState.HasInternet)">LoggedIn: @(AppState.User != null ? "Logged In" : "Logged Off")</MudButton>
            <MudButton Color="@(AppState.User?.ProfilePicture != null ? Color.Success : Color.Error)" @onclick="toggleProfilePicture" Variant="Variant.Filled" Disabled="@(AppState.User == null)">@(AppState.User?.ProfilePicture != null ? "Profile Picture" : "No Profile Picture")</MudButton>
            <MudButton Color="@getCultureButtonColor()" Variant="Variant.Filled" OnClick="toggleCulture">Toggle Language</MudButton>
            <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="getMessages">Messages Page Test</MudButton>
            <MudText>Current Culture = @AppState.Culture.Name</MudText>
            <MudText>About Community: @AppState.Translate("AboutCommunity")</MudText>
            <MudText Typo="Typo.h3" GutterBottom="true">Counter</MudText>
            <MudText Class="mb-4">Current count: @currentCount</MudText>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="IncrementCount">Click me</MudButton>
            <MudIcon Icon="PluginDemocracyIcons.CommunityIcon" Color="Color.Primary" />
            <MudText>AppState.BaseUrl: @AppState.BaseUrl</MudText>
            <MudButton Color="Color.Tertiary" Variant="Variant.Filled" OnClick="goTo">Testing Navitation</MudButton>
            <MudButton Color="Color.Surface" Variant="Variant.Filled" OnClick="changeIsLoading">ChangeIsLoading</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="createTestSnackBars">
                Open Snackbar
            </MudButton>
        </div>
    </MudContainer>

    @code {
    public List<string> imagesList = new() { "https://www.w3schools.com/w3images/lights.jpg" };

    private PostDto postDto = new()
        {
            Author = new UserDto()
            {
                FirstName = "Joseph",
                LastName = "Gregory",
            },
            Body = "This is a test post. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
            Images = new List<string>()
        {
            "https://www.w3schools.com/w3images/lights.jpg",
            "https://www.w3schools.com/w3images/nature.jpg",
            "https://www.w3schools.com/w3images/mountains.jpg"
        },
            Comments = new List<PostCommentDto>()
        {
            new PostCommentDto()
            {
                Author = new UserDto()
                {
                    FirstName = "Joseph",
                    LastName = "Gregory",
                },
                Comment = "This is a test comment. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                PublishedDate = DateTime.Now
            },
            new PostCommentDto()
            {
                Author = new UserDto()
                {
                    FirstName = "Joseph",
                    LastName = "Gregory",
                },
                Comment = "This is a test comment. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                PublishedDate = DateTime.Now
            },
            new PostCommentDto()
            {
                Author = new UserDto()
                {
                    FirstName = "Joseph",
                    LastName = "Gregory",
                },
                Comment = "This is a test comment. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                PublishedDate = DateTime.Now
            }
        }
        };

    private const string AmericanFlag = "\U0001F1FA\U0001F1F8"; // 🇺🇸
    private const string MexicanFlag = "\U0001F1F2\U0001F1FD"; // 🇲🇽
    public UserDto aUser = new()
        {
            FirstName = "Joseph",
            LastName = "Gregory",
            Culture = new System.Globalization.CultureInfo("es-MX")

        };

    private void changeIsLoading()
    {
        AppState.IsLoading = !AppState.IsLoading;
    }
    private void createTestSnackBars()
    {
        Snackbar.Add("Normal Snackbar", Severity.Normal);
        Snackbar.Add("Info Snackbar", Severity.Info);
        Snackbar.Add("Success Snackbar", Severity.Success);
        Snackbar.Add("Warning Snackbar", Severity.Warning);
        Snackbar.Add("Error Snackbar", Severity.Error);
    }
    private void goTo()
    {
        services.NavigateTo("message");
    }
    private async Task getMessages()
    {
        string url = ApiEndPoints.GetTestMessagesPage;
        PDAPIResponse apiResponse = await services.GetDataAsync(url);
    }

    private void toggleInternetState()
    {
        AppState.SetInternetState(!AppState.HasInternet);
        if (!AppState.HasInternet) AppState.LogOut();
    }

    private void toggleLoggedInState()
    {
        if (AppState.User == null) AppState.LogIn(aUser);
        else AppState.LogOut();
    }

    private void toggleProfilePicture()
    {
        if (AppState.User != null)
        {
            if (!string.IsNullOrEmpty(AppState.User.ProfilePicture)) AppState.User.ProfilePicture = null;
            else AppState.User.ProfilePicture = "https://media.licdn.com/dms/image/D5603AQFe6U_iRMn65Q/profile-displayphoto-shrink_100_100/0/1691519902265?e=1706140800&v=beta&t=YK7rArTUVTt-5HgGO7LnApl3tWcCMPweNfGELRW75GQ";
            StateHasChanged();
        }
    }

    private Color getCultureButtonColor()
    {
        if (AppState.Culture.Name == "en-US") return Color.Info;
        else if (AppState.Culture.Name == "es-MX") return Color.Success;
        else return Color.Error;
    }

    private void toggleCulture()
    {
        if (AppState.Culture.Name == "en-US") AppState.SetCulture(new CultureInfo("es-MX"));
        else AppState.SetCulture(new CultureInfo("en-US"));
    }
    protected override void OnInitialized()
    {
        base.OnInitialized();
        AppState.OnChange += () => InvokeAsync(StateHasChanged);
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (AppState.IsLoggedIn) await services.GetDataAsync(ApiEndPoints.RefreshUserData);
    }
    public void Dispose()
    {
        AppState.OnChange -= () => InvokeAsync(StateHasChanged);
    }
    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
}
